{"version":3,"file":"static/js/783.799178ed.chunk.js","mappings":"+OAiDA,EA5CoB,WAClB,IAAMA,GAAWC,EAAAA,EAAAA,MAYjB,OACE,UAAC,KAAD,CAAMC,SAXc,SAAAC,GACpBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,cACTC,EAAa,CAAEC,KAAMH,EAAKG,KAAKC,MAAOC,OAAQL,EAAKK,OAAOD,OAEhET,GAASW,EAAAA,EAAAA,IAAWJ,IACpBF,EAAKO,OACN,EAGC,WACE,UAAC,KAAD,mBAEE,kBACEC,KAAK,OACLL,KAAK,OACLM,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,aAAa,cAIjB,UAAC,KAAD,qBAEE,kBACEJ,KAAK,MACLL,KAAK,SACLM,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,aAAa,cAIjB,SAAC,KAAD,CAASJ,KAAK,SAAd,2BAGL,E,UC3BD,EAhBe,WACb,IAAMb,GAAWC,EAAAA,EAAAA,MAOjB,OACE,UAAC,KAAD,oCAEE,kBAAOY,KAAK,OAAOK,SARD,SAAAf,GACpB,IAAMgB,EAAchB,EAAEG,cAAcG,MACpCT,GAASoB,EAAAA,EAAAA,GAAUD,GACpB,MAQF,ECOD,GAnBwBE,EAAAA,EAAAA,OAAK,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAId,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAClCV,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC,KAAD,YACE,4BACGO,EADH,KACWE,MAEX,mBAAQY,GAAIA,EAAIC,QATH,SAAApB,GACfH,GAASwB,EAAAA,EAAAA,IAAcrB,EAAEG,cAAcgB,IACxC,EAOG,sBAKL,ICvBYG,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EACnBC,EAAe,SAAAF,GAAK,OAAIA,EAAMC,SAASE,SAAnB,EACpBC,EAAW,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,KAAnB,EAChBC,EAAY,SAAAN,GAAK,OAAIA,EAAMO,MAAV,ECqC9B,EA7BoB,WAClB,IAAMN,GAAWO,EAAAA,EAAAA,IAAYT,GAEvBU,EATkB,SAACR,EAAUR,GACnC,cAAOQ,QAAP,IAAOA,OAAP,EAAOA,EAAUM,QAAO,SAAAG,GAAO,OAC7BA,EAAQ5B,KAAK6B,cAAcC,SAASnB,EAAYkB,cADnB,GAGhC,CAKyBE,CAAkBZ,GADtBO,EAAAA,EAAAA,IAAYF,IAGhC,OAAI,OAACL,QAAD,IAACA,GAAAA,EAAUa,OAIX,OAACL,QAAD,IAACA,GAAAA,EAAiBK,QAKpB,SAAC,KAAD,UACGL,EAAgBM,KAAI,SAAAL,GACnB,OACE,SAAC,EAAD,CAEEd,GAAIc,EAAQd,GACZd,KAAM4B,EAAQ5B,KACdE,OAAQ0B,EAAQ1B,QAHX0B,EAAQd,GAMlB,OAdI,uCAJA,+CAqBV,E,UCOD,EA5BiB,WACf,IAAMtB,GAAWC,EAAAA,EAAAA,MACX4B,GAAYK,EAAAA,EAAAA,IAAYN,GACxBG,GAAQG,EAAAA,EAAAA,IAAYJ,GAM1B,OAJAY,EAAAA,EAAAA,YAAU,WACR1C,GAAS2C,EAAAA,EAAAA,MACV,GAAE,CAAC3C,KAGF,SAAC,KAAD,WACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,+BACA,SAAC,EAAD,QAEF,UAAC,KAAD,YACE,SAAC,KAAD,wBACA,SAAC,EAAD,IAEC6B,IAAcE,IAAS,SAACa,EAAA,EAAD,KACxB,SAAC,EAAD,WAKT,C","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Form, FormBtn, FormLabel } from 'components/StyledComponents/SC';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const newContact = { name: form.name.value, number: form.number.value };\n\n    dispatch(addContact(newContact));\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={submitHandler}>\n      <FormLabel>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"false\"\n        />\n      </FormLabel>\n\n      <FormLabel>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"false\"\n        />\n      </FormLabel>\n\n      <FormBtn type=\"submit\">Add contact</FormBtn>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import { FormLabel } from 'components/StyledComponents/SC';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterHandler = e => {\n    const filterValue = e.currentTarget.value;\n    dispatch(setFilter(filterValue));\n  };\n\n  return (\n    <FormLabel>\n      Find contacts by name\n      <input type=\"text\" onChange={filterHandler} />\n    </FormLabel>\n  );\n};\n\nexport default Filter;\n","import React, { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Item } from 'components/StyledComponents/SC';\n\nconst ContactListItem = memo(({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const onDelete = e => {\n    dispatch(deleteContact(e.currentTarget.id));\n  };\n\n  return (\n    <Item>\n      <span>\n        {name}: {number}\n      </span>\n      <button id={id} onClick={onDelete}>\n        Delete\n      </button>\n    </Item>\n  );\n});\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","export const getContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { StyledList } from 'components/StyledComponents/SC';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nconst getVisibeContacts = (contacts, filterValue) => {\n  return contacts?.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n};\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n  const visibleContacts = getVisibeContacts(contacts, filterValue);\n\n  if (!contacts?.length) {\n    return <p>You can add contacts</p>;\n  }\n\n  if (!visibleContacts?.length) {\n    return <p>Not found </p>;\n  }\n\n  return (\n    <StyledList>\n      {visibleContacts.map(contact => {\n        return (\n          <ContactListItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n          />\n        );\n      })}\n    </StyledList>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\nimport ContactList from '../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../components/Loader/Loader';\nimport { getIsLoading, getError } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  ContactsContainer,\n  Section,\n  StyledMain,\n  Title,\n} from 'components/StyledComponents/SC';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <StyledMain>\n      <ContactsContainer>\n        <Section>\n          <Title>Add new contact</Title>\n          <ContactForm />\n        </Section>\n        <Section>\n          <Title>Contacts</Title>\n          <Filter />\n\n          {isLoading && !error && <Loader />}\n          <ContactList />\n        </Section>\n      </ContactsContainer>\n    </StyledMain>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","newContact","name","value","number","addContact","reset","type","pattern","title","required","autoComplete","onChange","filterValue","setFilter","memo","id","onClick","deleteContact","getContacts","state","contacts","getIsLoading","isLoading","getError","error","getFilter","filter","useSelector","visibleContacts","contact","toLowerCase","includes","getVisibeContacts","length","map","useEffect","fetchContacts","Loader"],"sourceRoot":""}